
# Enable Sparkdock shell enhancements in your zshrc.
# Pass "force" as argument to override declined state: sjust shell-enable force
[group('shell')]
shell-enable $force="false":
    #!/usr/bin/env bash
    set -euo pipefail

    ZSHRC_FILE="${HOME}/.zshrc"
    SPARKDOCK_CHECK_LINE="if [ -f /opt/sparkdock/config/shell/sparkdock.zshrc ]; then"
    DECLINED_FILE="${HOME}/.config/spark/.shell-enable-declined"

    # Create zshrc if it doesn't exist
    touch "${ZSHRC_FILE}"

    echo ""
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë  ‚ú® Sparkdock Shell Enhancement Installer ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""

    # Check if user previously declined (unless force is true)
    if [[ -f "${DECLINED_FILE}" ]] && [[ "${force}" != "force" ]]; then
        echo "‚ÑπÔ∏è You previously declined to enable Sparkdock shell enhancements"
        echo "üí° To enable anyway, run: sjust shell-enable force"
        exit 0
    fi

    # Remove declined file if forcing installation
    if [[ -f "${DECLINED_FILE}" ]] && [[ "${force}" == "force" ]]; then
        rm -f "${DECLINED_FILE}"
        echo "üîÑ Removed declined marker, proceeding with installation..."
        echo ""
    fi

    # Check if already enabled
    if grep -qF "${SPARKDOCK_CHECK_LINE}" "${ZSHRC_FILE}"; then
        echo "‚ÑπÔ∏è  Sparkdock shell enhancements are already enabled in ${ZSHRC_FILE}"
        echo ""
        echo "If you want reinstall again:"
        echo "  1) Run 'sjust shell-disable' to remove existing configuration"
        echo "  2) Run 'sjust shell-enable' to enable again"
        exit 0
    fi

    # Detect existing configurations
    HAS_OMZ=false
    HAS_STARSHIP=false
    HAS_ATUIN=false
    HAS_FZF=false

    if [[ -f "${ZSHRC_FILE}" ]]; then
        if grep -qE "(source.*oh-my-zsh\.sh|ZSH=)" "${ZSHRC_FILE}"; then
            HAS_OMZ=true
        fi
        if grep -qE "starship init (zsh|bash)" "${ZSHRC_FILE}"; then
            HAS_STARSHIP=true
        fi
        if grep -qE "atuin init (zsh|bash)" "${ZSHRC_FILE}"; then
            HAS_ATUIN=true
        fi
        if grep -qE "(\[ -f.*fzf\.zsh \]|source.*fzf)" "${ZSHRC_FILE}"; then
            HAS_FZF=true
        fi
    fi

    DEFAULT_STARSHIP="1"
    DEFAULT_FZF="1"
    DEFAULT_ATUIN="0"
    STARSHIP_COMMENT="Enabled by default"
    FZF_COMMENT="Enabled by default"
    ATUIN_COMMENT="Disabled by default"

    echo ""
    echo "üéØ Core tooling (always enabled):"
    echo "   ‚Ä¢ eza (modern ls)"
    echo "   ‚Ä¢ fd (faster find)"
    echo "   ‚Ä¢ ripgrep (fast search)"
    echo "   ‚Ä¢ bat (syntax-highlighted cat)"
    echo "   ‚Ä¢ zoxide (smart cd)"
    echo "   ‚Ä¢ oh-my-zsh (plugin framework)"
    echo ""
    echo "‚ú® Optional extras (toggled via SPARKDOCK_ENABLE_*):"
    echo "   ‚Ä¢ starship prompt"
    echo "   ‚Ä¢ fzf fuzzy finder"
    echo "   ‚Ä¢ atuin history sync"
    echo ""
    echo "üìÅ Terminal configs (symlinked if not present):"
    echo "   ‚Ä¢ ~/.config/alacritty/alacritty.toml"
    echo "   ‚Ä¢ ~/.config/ghostty/config"
    echo "   ‚Ä¢ ~/.config/eza/theme.yml"
    echo "   ‚Ä¢ ~/.config/starship.toml (if starship enabled)"
    echo ""
    echo "üîç Detected in ${ZSHRC_FILE}:"
    if [[ "${HAS_OMZ}" == "true" ]]; then
        echo "  ‚Ä¢ ‚úÖ oh-my-zsh already configured ‚Üí Sparkdock keeps your plugin setup"
    else
        echo "  ‚Ä¢ ‚ö™ oh-my-zsh not detected ‚Üí Sparkdock will initialize it if present"
    fi

    if [[ "${HAS_STARSHIP}" == "true" ]]; then
        DEFAULT_STARSHIP="0"
        STARSHIP_COMMENT="Already configured; Sparkdock skips initialization"
        echo "  ‚Ä¢ ‚úÖ starship already configured ‚Üí Sparkdock will skip its own init"
    else
        echo "  ‚Ä¢ ‚ö° starship not detected ‚Üí Sparkdock enables SPARKDOCK_ENABLE_STARSHIP=1"
    fi

    if [[ "${HAS_ATUIN}" == "true" ]]; then
        DEFAULT_ATUIN="0"
        ATUIN_COMMENT="Already configured; Sparkdock skips initialization"
        DEFAULT_FZF="0"
        FZF_COMMENT="Disabled because atuin manages fuzzy history"
        echo "  ‚Ä¢ ‚úÖ atuin already configured ‚Üí Sparkdock leaves SPARKDOCK_ENABLE_ATUIN=0"
        echo "  ‚Ä¢ üîÑ atuin provides history search ‚Üí Sparkdock leaves fzf disabled"
    else
        echo "  ‚Ä¢ üí§ atuin not detected ‚Üí stays disabled (set SPARKDOCK_ENABLE_ATUIN=1 to enable)"
    fi

    if [[ "${HAS_FZF}" == "true" ]]; then
        DEFAULT_FZF="0"
        FZF_COMMENT="Already configured; Sparkdock skips integration"
        echo "  ‚Ä¢ ‚úÖ fzf already configured ‚Üí Sparkdock will not override your setup"
    elif [[ "${HAS_ATUIN}" != "true" ]]; then
        echo "  ‚Ä¢ ‚ú® fzf not detected ‚Üí Sparkdock enables SPARKDOCK_ENABLE_FZF=1"
    fi

    echo ""
    echo "This will add the following configuration to ${ZSHRC_FILE}:"
    echo ""
    echo "  if [ -f /opt/sparkdock/config/shell/sparkdock.zshrc ]; then"
    echo "    export SPARKDOCK_ENABLE_STARSHIP=${DEFAULT_STARSHIP}  # ${STARSHIP_COMMENT}"
    echo "    export SPARKDOCK_ENABLE_FZF=${DEFAULT_FZF}  # ${FZF_COMMENT}"
    echo "    export SPARKDOCK_ENABLE_ATUIN=${DEFAULT_ATUIN}  # ${ATUIN_COMMENT}"
    echo "    source /opt/sparkdock/config/shell/sparkdock.zshrc;"
    echo "  fi"
    echo ""
    echo "üìö Want to explore all features? Run: sjust shell-info"
    echo ""

    read -p "Do you want to enable Sparkdock shell enhancements? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Shell enhancement setup cancelled"
        echo ""
        mkdir -p "${HOME}/.config/spark"
        touch "${DECLINED_FILE}"
        echo "üí° If you change your mind later, run: sjust shell-enable force"
        exit 0
    fi

    # Install oh-my-zsh if not already installed
    if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        echo ""
        echo "üì¶ Installing oh-my-zsh..."
        sjust shell-omz-setup
        echo ""
    fi

    BACKUP_FILE="${ZSHRC_FILE}.backup.$(date +%Y%m%d%H%M%S)"
    cp "${ZSHRC_FILE}" "${BACKUP_FILE}"
    echo "‚úÖ Backup created: ${BACKUP_FILE}"
    echo ""
    {
        echo ""
        echo "# Sparkdock shell enhancements"
        echo "if [ -f /opt/sparkdock/config/shell/sparkdock.zshrc ]; then"
        echo "  export SPARKDOCK_ENABLE_STARSHIP=1"
        echo "  export SPARKDOCK_ENABLE_FZF=1"
        echo "  export SPARKDOCK_ENABLE_ATUIN=0"
        echo "  source /opt/sparkdock/config/shell/sparkdock.zshrc;"
        echo "fi"
    } >> "${ZSHRC_FILE}"
    echo "‚úÖ Sparkdock shell enhancements enabled in ${ZSHRC_FILE}"
    echo ""

    # Setup configurations for tools if they will be enabled
    if command -v starship &> /dev/null && [[ "${HAS_STARSHIP}" == "false" ]]; then
        sjust shell-starship-setup 2>/dev/null || true
    fi

    if command -v eza &> /dev/null; then
        sjust shell-eza-setup 2>/dev/null || true
    fi

    # Setup terminal configurations
    sjust shell-alacritty-setup 2>/dev/null || true
    sjust shell-ghostty-setup 2>/dev/null || true

    echo "üí° Run 'source ~/.zshrc' or restart your terminal to activate"

# Disable Sparkdock shell enhancements from your zshrc.
[group('shell')]
shell-disable:
    #!/usr/bin/env bash
    set -euo pipefail

    ZSHRC_FILE="${HOME}/.zshrc"
    SPARKDOCK_CHECK_LINE="if [ -f /opt/sparkdock/config/shell/sparkdock.zshrc ]; then"

    if ! grep -qF "${SPARKDOCK_CHECK_LINE}" "${ZSHRC_FILE}"; then
        echo "‚ÑπÔ∏è  Sparkdock shell enhancements are not enabled in ${ZSHRC_FILE}"
        exit 0
    fi

    # Create a backup
    BACKUP_FILE="${ZSHRC_FILE}.backup.$(date +%Y%m%d%H%M%S)"
    cp "${ZSHRC_FILE}" "${BACKUP_FILE}"
    echo "‚úÖ Backup created: ${BACKUP_FILE}"

    # Remove the entire Sparkdock configuration block from zshrc
    # This removes the comment line and the entire if block
    sed -i.tmp -e '/# Sparkdock shell enhancements/,/^fi$/d' "${ZSHRC_FILE}"
    rm -f "${ZSHRC_FILE}.tmp"

    echo "‚úÖ Sparkdock shell enhancements disabled from ${ZSHRC_FILE}"
    echo "üí° You can remove \"~/.oh-my-zsh\" if you no longer need it."
    echo "üí° Backup saved to ${BACKUP_FILE}"
    echo "üí° Run 'source ~/.zshrc' or restart your terminal to deactivate"

# Show information about Sparkdock shell enhancements and aliases.
[group('shell')]
shell-info:
    #!/usr/bin/env bash
    set -euo pipefail
    source /opt/sparkdock/sjust/libs/libshell.sh
    print_shell_info

# Setup oh-my-zsh and zsh plugins.
[group('shell')]
shell-omz-setup:
    #!/usr/bin/env bash
    set -euo pipefail

    echo "=========================================="
    echo "Setting up oh-my-zsh and zsh plugins"
    echo "=========================================="
    echo ""

    # Install oh-my-zsh if not already installed
    if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        echo "üì¶ Installing oh-my-zsh..."

        # Download installer with integrity verification
        OMZ_INSTALL_SCRIPT="/tmp/omz-install-$$.sh"
        echo "üì• Downloading oh-my-zsh installer..."
        curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -o "${OMZ_INSTALL_SCRIPT}"

        # Show checksum for verification
        echo "üîê Installer SHA256 checksum:"
        shasum -a 256 "${OMZ_INSTALL_SCRIPT}"
        echo ""
        echo "üí° You can verify this checksum at: https://github.com/ohmyzsh/ohmyzsh"
        echo ""

        # Execute the installer with KEEP_ZSHRC to preserve user's .zshrc
        KEEP_ZSHRC=yes sh "${OMZ_INSTALL_SCRIPT}" --unattended
        rm -f "${OMZ_INSTALL_SCRIPT}"

        echo "‚úÖ oh-my-zsh installed"
    else
        # Update oh-my-zsh if already installed.
        echo "üì¶ Updating oh-my-zsh..."
        git -C "$HOME/.oh-my-zsh" pull --quiet
    fi

    # Create plugins directory
    PLUGINS_DIR="${HOME}/.config/spark/zsh-plugins"
    mkdir -p "${PLUGINS_DIR}"

    # Install zsh-completions
    if [[ -d "${PLUGINS_DIR}/zsh-completions" ]]; then
        echo "üì¶ Updating zsh-completions..."
        git -C "${PLUGINS_DIR}/zsh-completions" pull --quiet
    else
        echo "üì¶ Installing zsh-completions..."
        git clone --quiet https://github.com/zsh-users/zsh-completions "${PLUGINS_DIR}/zsh-completions"
    fi

    # Install zsh-autosuggestions
    if [[ -d "${PLUGINS_DIR}/zsh-autosuggestions" ]]; then
        echo "üì¶ Updating zsh-autosuggestions..."
        git -C "${PLUGINS_DIR}/zsh-autosuggestions" pull --quiet
    else
        echo "üì¶ Installing zsh-autosuggestions..."
        git clone --quiet https://github.com/zsh-users/zsh-autosuggestions "${PLUGINS_DIR}/zsh-autosuggestions"
    fi

    # Install zsh-syntax-highlighting
    if [[ -d "${PLUGINS_DIR}/zsh-syntax-highlighting" ]]; then
        echo "üì¶ Updating zsh-syntax-highlighting..."
        git -C "${PLUGINS_DIR}/zsh-syntax-highlighting" pull --quiet
    else
        echo "üì¶ Installing zsh-syntax-highlighting..."
        git clone --quiet https://github.com/zsh-users/zsh-syntax-highlighting "${PLUGINS_DIR}/zsh-syntax-highlighting"
    fi

    echo ""
    echo "üìÇ Creating symlinks to oh-my-zsh custom plugins..."

    # Create oh-my-zsh custom plugins directory
    mkdir -p "$HOME/.oh-my-zsh/custom/plugins"

    # Symlink plugins to oh-my-zsh
    ln -sf "${PLUGINS_DIR}/zsh-completions" "$HOME/.oh-my-zsh/custom/plugins/zsh-completions"
    ln -sf "${PLUGINS_DIR}/zsh-autosuggestions" "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    ln -sf "${PLUGINS_DIR}/zsh-syntax-highlighting" "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

    echo "‚úÖ Symlinks created"
    echo ""
    echo "‚úÖ Setup complete!"
    echo ""
    echo "The following plugins are now available:"
    echo "  - zsh-completions"
    echo "  - zsh-autosuggestions"
    echo "  - zsh-syntax-highlighting"
    echo "  - ssh-agent (built-in to oh-my-zsh)"
    echo ""
    echo "Plugins are automatically enabled when you source sparkdock.zshrc"
    echo "Configuration is in: /opt/sparkdock/config/shell/omz-init.zsh"
    echo ""
    echo "üí° To update on-my-zsh and plugins in the future, simply re-run 'sjust shell-omz-setup'"

# Setup Starship prompt configuration.
[group('shell')]
shell-starship-setup:
    @just _shell-config-setup \
        "starship" \
        "${HOME}/.config/starship.toml" \
        "/opt/sparkdock/config/shell/config/starship/starship.toml" \
        "config at ~/.config/starship.toml" \
        "See https://starship.rs/config/ for configuration options"

# Setup eza theme configuration.
[group('shell')]
shell-eza-setup:
    @just _shell-config-setup \
        "eza" \
        "${HOME}/.config/eza/theme.yml" \
        "/opt/sparkdock/config/shell/config/eza/theme.yml" \
        "theme at ~/.config/eza/theme.yml" \
        "Based on Catppuccin color scheme"

# Generic configuration setup helper (internal use).
_shell-config-setup tool_name config_path sparkdock_path config_description setup_info:
    #!/usr/bin/env bash
    source /opt/sparkdock/sjust/libs/libshell.sh

    USER_CONFIG="{{config_path}}"
    SPARKDOCK_CONFIG="{{sparkdock_path}}"

    check_sparkdock_symlink "${USER_CONFIG}" "${SPARKDOCK_CONFIG}"
    status=$?

    if [[ ${status} -ne 2 ]]; then
        print_config_status "{{tool_name}}" "${status}" "${USER_CONFIG}" "${SPARKDOCK_CONFIG}" "{{config_description}}"
        echo ""
        exit 0
    fi

    echo "üì¶ Setting up default {{tool_name}} config..."
    mkdir -p "$(dirname "${USER_CONFIG}")"
    ln -sf "${SPARKDOCK_CONFIG}" "${USER_CONFIG}"
    echo "‚úÖ Default {{tool_name}} config symlinked to ${USER_CONFIG}"
    print_setup_complete "${USER_CONFIG}" "${SPARKDOCK_CONFIG}" "{{setup_info}}"

# Setup Alacritty configuration.
[group('shell')]
shell-alacritty-setup:
    @just _shell-config-setup \
        "alacritty" \
        "${HOME}/.config/alacritty/alacritty.toml" \
        "/opt/sparkdock/config/shell/config/alacritty/alacritty.toml" \
        "config at ~/.config/alacritty/alacritty.toml" \
        "Based on Catppuccin Mocha theme with JetBrains Mono font"

# Setup Ghostty configuration.
[group('shell')]
shell-ghostty-setup:
    @just _shell-config-setup \
        "ghostty" \
        "${HOME}/.config/ghostty/config" \
        "/opt/sparkdock/config/shell/config/ghostty/config" \
        "config at ~/.config/ghostty/config" \
        "Based on Catppuccin Mocha theme"
