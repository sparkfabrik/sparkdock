---
- name: Configure macOS system
  hosts: localhost
  connection: local
  gather_facts: yes

  vars:
    dev_env_dir: /opt/sparkdock
    homebrew_prefix: "{{ (ansible_machine == 'arm64') | ternary('/opt/homebrew', '/usr/local') }}"
    homebrew_install_path: "{{ homebrew_prefix }}/Homebrew"
    homebrew_brew_bin_path: "{{ homebrew_prefix }}/bin"

  tasks:
    - name: Load package definitions
      include_vars: "{{ item }}"
      loop:
        - "{{ dev_env_dir }}/config/packages/removed-packages.yml"
        - "{{ dev_env_dir }}/config/packages/cloud-tools.yml"
        - "{{ dev_env_dir }}/config/packages/system-utilities.yml"
        - "{{ dev_env_dir }}/config/packages/development-tools.yml"
        - "{{ dev_env_dir }}/config/packages/applications.yml"
      ignore_errors: yes
      tags: always

    - name: Collect all package lists
      set_fact:
        all_cask_packages: "{{ vars | dict2items | selectattr('value.cask_packages', 'defined') | map(attribute='value.cask_packages') | list | flatten }}"
        all_homebrew_packages: "{{ vars | dict2items | selectattr('value.homebrew_packages', 'defined') | map(attribute='value.homebrew_packages') | list | flatten }}"
        all_linked_packages: "{{ vars | dict2items | selectattr('value.linked_packages', 'defined') | map(attribute='value.linked_packages') | list | flatten }}"
        all_removed_homebrew: "{{ removed_homebrew_packages | default([]) }}"
        all_removed_taps: "{{ removed_taps | default([]) }}"

    - name: Debug loaded variables
      debug:
        msg:
          - "All removed homebrew: {{ all_removed_homebrew }}"
          - "All removed taps: {{ all_removed_taps }}"
          - "All variables: {{ vars.keys() | list }}"
      when: ansible_verbosity >= 1

    - name: Debug homebrew paths
      debug:
        msg:
          - "Prefix: {{ homebrew_prefix }}"
          - "Install path: {{ homebrew_install_path }}"
          - "Bin path: {{ homebrew_brew_bin_path }}"

    - name: Update and upgrade homebrew packages
      community.general.homebrew:
        update_homebrew: true
        upgrade_all: false
      become: false

    - name: Remove unwanted packages
      community.general.homebrew:
        name: "{{ all_removed_homebrew }}"
        state: absent
        update_homebrew: false
      when: all_removed_homebrew | length > 0
      become: false

    - name: Remove deprecated taps
      community.general.homebrew_tap:
        name: "{{ all_removed_taps }}"
        state: absent
      when: all_removed_taps | length > 0
      become: false

    - name: Install cask packages
      tags: cask
      community.general.homebrew_cask:
        name: "{{ all_cask_packages }}"
        state: present
        install_options: force
      when: all_cask_packages | length > 0
      become: false

    - name: Install gcloud components
      command: "{{ homebrew_brew_bin_path }}/gcloud components install gke-gcloud-auth-plugin gsutil"
      register: command_result
      changed_when: "'All components are up to date' not in command_result.stderr"
      become: false

    - name: Install homebrew packages
      community.general.homebrew:
        name: "{{ all_homebrew_packages }}"
        state: present
        update_homebrew: false
      when: all_homebrew_packages | length > 0
      become: false

    - name: Link required packages
      community.general.homebrew:
        name: "{{ item }}"
        state: linked
      loop: "{{ all_linked_packages }}"
      when: all_linked_packages | length > 0
      become: false

    - name: Run brew doctor
      command: brew doctor
      register: brew_doctor_result
      changed_when: false
      ignore_errors: yes
      become: false

    - name: Show brew doctor results
      debug:
        msg: "{{ brew_doctor_result.stdout_lines }}"
      when: brew_doctor_result.stdout != ""

    - name: Show brew doctor warnings
      debug:
        msg: "{{ brew_doctor_result.stderr_lines }}"
      when: brew_doctor_result.stderr != ""

    - name: Install fonts and applications
      tags: cask
      community.general.homebrew_cask:
        name: "{{ applications.cask_packages }}"
        state: present
        install_options: force
      when: applications is defined and applications.cask_packages is defined
      become: false

    - name: Configure DNS resolver
      block:
        - name: Create resolver directory
          file: path=/etc/resolver state=directory mode=0755

        - name: Create and configure loc resolver
          copy:
            dest: /etc/resolver/loc
            content: |
              nameserver 127.0.0.1
              port 19322
            mode: 0755

        - name: Clear dns cache
          command: killall -HUP mDNSResponder
      become: yes
      become_method: sudo

    - name: Install system scripts
      block:
        - name: Ensure /usr/local/bin exists
          file: path=/usr/local/bin state=directory

        - name: Copy system scripts
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: "0755"
          loop:
            - {
                src: "{{ dev_env_dir }}/config/macos/bin/run-dinghy-proxy",
                dest: "/usr/local/bin/run-dinghy-proxy",
              }
            - {
                src: "{{ dev_env_dir }}/config/bin/test-dinghy-proxy",
                dest: "/usr/local/bin/test-dinghy-proxy",
              }
            - {
                src: "{{ dev_env_dir }}/config/macos/bin/ayse-get-sm",
                dest: "/usr/local/bin/ayse-get-sm",
              }
      become: yes
      become_method: sudo

    - name: Configure keyboard settings
      tags: keyboard
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - {
            src: "config/keyboard/en-intl-alt-gr-dead-keys.keylayout",
            dest: "~/Library/Keyboard Layouts",
          }
        - {
            src: "config/keyboard/DefaultKeyBinding.dict",
            dest: "~/Library/KeyBindings",
          }

    # Install to /usr/local/bin as the other binaries.
    - name: Install sjust executable
      tags: sjust
      block:
        - name: Copy sjust executable
          copy:
            src: "{{ dev_env_dir }}/sjust/sjust.sh"
            dest: "/usr/local/bin/sjust"
            mode: "0755"
          become: yes
          become_method: sudo

        - name: Get Homebrew prefix
          command: brew --prefix
          register: brew_prefix
          changed_when: false

        - name: Ensure bash completion directory exists
          file:
            path: "{{ brew_prefix.stdout }}/etc/bash_completion.d"
            state: directory
            mode: "0755"

        - name: Generate sjust zsh completion
          shell: |
            just --completions zsh | sed -E 's/([\(_" ])just/\1sjust/g' > "{{ brew_prefix.stdout }}/share/zsh/site-functions/_sjust"
          register: completion_result
          changed_when: completion_result.rc == 0

        - name: Set permissions for sjust zsh completion
          file:
            path: "{{ brew_prefix.stdout }}/share/zsh/site-functions/_sjust"
            mode: "0644"

  post_tasks:
    - name: Print installation complete message
      debug:
        msg: "macOS system configuration completed successfully!"
