---
- name: Configure macOS system
  hosts: localhost
  connection: local
  gather_facts: yes
  become: no

  vars:
    dev_env_dir: /opt/sparkdock
    homebrew_prefix: "{{ (ansible_machine == 'arm64') | ternary('/opt/homebrew', '/usr/local') }}"
    homebrew_install_path: "{{ homebrew_prefix }}/Homebrew"
    homebrew_brew_bin_path: "{{ homebrew_prefix }}/bin"
    ansible_become_pass: "{{ lookup('env', 'ANSIBLE_BECOME_PASS') }}"

  tasks:
    - name: Check if running in non-interactive environment
      set_fact:
        is_non_interactive: "{{ ansible_env.CI is defined or ansible_env.GITHUB_ACTIONS is defined or ansible_env.RUNNER_OS is defined or ansible_env.HOME == '/var/root' or ansible_env.ANSIBLE_SUDO_PASSWORD is defined }}"

    - name: Load all packages
      include_vars:
        file: "{{ dev_env_dir }}/config/packages/all-packages.yml"
        name: all_packages
      tags: always

    - name: Collect all package lists
      tags: brew_packages
      set_fact:
        all_cask_packages: "{{ all_packages.cask_packages | default([]) }}"
        all_homebrew_packages: "{{ all_packages.homebrew_packages | default([]) }}"
        all_linked_packages: "{{ all_packages.linked_packages | default([]) }}"
        all_removed_homebrew: "{{ all_packages.removed_homebrew_packages | default([]) }}"
        all_removed_taps: "{{ all_packages.removed_taps | default([]) }}"
        all_taps: "{{ all_packages.taps | default([]) }}"
        all_removed_cask_packages: "{{ all_packages.removed_cask_packages | default([]) }}"

    - name: Configure homebrew taps
      tags: brew_packages
      community.general.homebrew_tap:
        name: "{{ item }}"
        state: present
      loop: "{{ all_taps }}"
      when: all_taps | length > 0
      become: false

    - name: Debug loaded variables
      debug:
        msg:
          - "All removed homebrew: {{ all_removed_homebrew }}"
          - "All removed taps: {{ all_removed_taps }}"
          - "All cask packages: {{ all_cask_packages }}"
          - "All homebrew packages: {{ all_homebrew_packages }}"
          - "All linked packages: {{ all_linked_packages }}"
          - "All variables: {{ vars.keys() | list }}"
      when: ansible_verbosity >= 1

    - name: Debug homebrew paths
      debug:
        msg:
          - "Prefix: {{ homebrew_prefix }}"
          - "Install path: {{ homebrew_install_path }}"
          - "Bin path: {{ homebrew_brew_bin_path }}"

    - name: Check which deprecated taps are actually installed
      tags: brew_packages
      ansible.builtin.command:
        argv:
          - brew
          - tap
      register: installed_taps
      when: all_removed_taps | length > 0
      become: false
      changed_when: false

    - name: Remove deprecated taps before homebrew update
      tags: brew_packages
      ansible.builtin.command:
        argv:
          - brew
          - untap
          - --force
          - "{{ item }}"
      loop: "{{ all_removed_taps }}"
      when: 
        - all_removed_taps | length > 0
        - item in installed_taps.stdout
      become: false
      ignore_errors: true

    - name: Update homebrew
      tags: brew_packages
      community.general.homebrew:
        update_homebrew: true
        upgrade_all: false
      become: false

    - name: Remove unwanted packages
      tags: brew_packages
      community.general.homebrew:
        name: "{{ item }}"
        state: absent
        update_homebrew: false
      loop: "{{ all_removed_homebrew }}"
      when: all_removed_homebrew | length > 0
      become: false

    - name: Docker and container runtime installation
      tags: [docker]
      block:
        - name: Check if Docker Desktop is already installed
          shell: brew list --cask docker-desktop >/dev/null 2>&1 && echo yes || echo no
          register: docker_desktop_installed
          changed_when: false

        - name: Remove Docker Desktop from install list if already installed
          set_fact:
            all_cask_packages: "{{ all_cask_packages | difference(['docker-desktop']) }}"
          when: "'docker-desktop' in all_cask_packages and docker_desktop_installed.stdout == 'yes'"

    - name: Google Chrome installation
      tags: [chrome]
      block:
        - name: Check if Google Chrome is already installed
          shell: brew list --cask google-chrome >/dev/null 2>&1 && echo yes || echo no
          register: google_chrome_installed
          changed_when: false

        - name: Remove Google Chrome from install list if already installed
          set_fact:
            all_cask_packages: "{{ all_cask_packages | difference(['google-chrome']) }}"
          when: "'google-chrome' in all_cask_packages and google_chrome_installed.stdout == 'yes'"

    - name: Install cask packages
      tags: cask
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: present
        install_options: force
        sudo_password: "{{ ansible_become_pass | default(omit) }}"
      loop: "{{ all_cask_packages }}"
      when: all_cask_packages | length > 0
      become: false

    - name: Assert cask packages installed
      shell: |
        missing=0
        for pkg in {{ all_cask_packages | map('quote') | join(' ') }}; do
          brew list --cask "$pkg" >/dev/null 2>&1 || { echo "$pkg missing"; missing=1; }
        done
        exit $missing
      register: cask_check
      changed_when: false
      failed_when: cask_check.rc != 0
      become: false

    - name: Install gke-gcloud-auth-plugin component
      shell: source {{ homebrew_prefix }}/share/google-cloud-sdk/path.zsh.inc && gcloud components install gke-gcloud-auth-plugin --quiet
      args:
        executable: /bin/zsh
      when: "'google-cloud-sdk' in all_cask_packages"
      become: false

    - name: Install homebrew packages
      tags: brew_packages
      community.general.homebrew:
        name: "{{ item }}"
        state: present
        update_homebrew: false
      loop: "{{ all_homebrew_packages }}"
      when: all_homebrew_packages | length > 0
      become: false

    - name: Assert homebrew packages installed
      tags: brew_packages
      shell: |
        missing=0
        for pkg in {{ all_homebrew_packages | map('quote') | join(' ') }}; do
          brew list "$pkg" >/dev/null 2>&1 || { echo "$pkg missing"; missing=1; }
        done
        exit $missing
      register: brew_check
      changed_when: false
      failed_when: brew_check.rc != 0
      become: false

    - name: Link yarn with conflict resolution
      command: brew link --overwrite yarn
      when: "'yarn' in all_homebrew_packages"
      become: false
      ignore_errors: yes

    - name: Link required packages
      community.general.homebrew:
        name: "{{ item }}"
        state: linked
      loop: "{{ all_linked_packages }}"
      when: all_linked_packages | length > 0
      become: false

    - name: Run brew doctor
      command: brew doctor
      register: brew_doctor_result
      changed_when: false
      ignore_errors: yes
      become: false

    - name: Show brew doctor results
      debug:
        msg: "{{ brew_doctor_result.stdout_lines }}"
      when: brew_doctor_result.stdout != ""

    - name: Show brew doctor warnings
      debug:
        msg: "{{ brew_doctor_result.stderr_lines }}"
      when: brew_doctor_result.stderr != ""

    - name: Install GitHub Copilot CLI
      tags: copilot-cli
      community.general.npm:
        name: "@github/copilot"
        global: true
        state: present
      when: "'node' in all_homebrew_packages"
      become: false

    - name: Configure DNS resolver
      block:
        - name: Create resolver directory
          file: path=/etc/resolver state=directory mode=0755

        - name: Create and configure loc resolver
          copy:
            dest: /etc/resolver/loc
            content: |
              nameserver 127.0.0.1
              port 19322
            mode: 0755

        - name: Clear dns cache
          command: killall -HUP mDNSResponder
      become: yes
      become_method: sudo

    - name: Configure git safe directory for sparkdock
      command: git config --global --add safe.directory "{{ dev_env_dir }}"
      become: no
      tags: [always]

    - name: Install system scripts
      tags: http-proxy
      block:
        - name: Configure git safe directory for http-proxy
          command: git config --global --add safe.directory "{{ dev_env_dir }}/http-proxy"
          become: no

        - name: Ensure /usr/local/bin exists
          file: path=/usr/local/bin state=directory

        - name: Check if http-proxy directory exists
          stat:
            path: "{{ dev_env_dir }}/http-proxy"
          register: http_proxy_dir

        - name: Fix ownership of http-proxy directory for git operations.
          file:
            path: "{{ dev_env_dir }}/http-proxy"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_gid }}"
            recurse: yes
          when: not (vars.is_non_interactive | default(false))
          become: yes
          become_method: sudo

        - name: Clone http-proxy repository
          git:
            repo: https://github.com/sparkfabrik/http-proxy.git
            dest: "{{ dev_env_dir }}/http-proxy"
            version: main
            force: yes
            update: yes
          register: http_proxy_clone
          become: no

        - name: Make spark-http-proxy executable
          file:
            path: "{{ dev_env_dir }}/http-proxy/bin/spark-http-proxy"
            mode: "0755"

        - name: Create main spark-http-proxy symlink
          file:
            src: "{{ dev_env_dir }}/http-proxy/bin/spark-http-proxy"
            dest: /usr/local/bin/spark-http-proxy
            state: link
            force: yes

        - name: Create backward compatibility symlinks for http-proxy
          file:
            src: /usr/local/bin/spark-http-proxy
            dest: "{{ item }}"
            state: link
            force: yes
          loop:
            - /usr/local/bin/run-http-proxy
            - /usr/local/bin/run-dinghy-proxy

        - name: Copy remaining system scripts
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: "0755"
          loop:
            - {
                src: "{{ dev_env_dir }}/config/bin/test-http-proxy",
                dest: "/usr/local/bin/test-http-proxy",
              }
            - {
                src: "{{ dev_env_dir }}/config/macos/bin/ayse-get-sm",
                dest: "/usr/local/bin/ayse-get-sm",
              }
      become: yes
      become_method: sudo

    - name: Handle transition from dinghy-proxy to http-proxy
      tags: http-proxy
      block:
        - name: Verify new http-proxy binaries exist before transition
          stat:
            path: "{{ item }}"
          register: new_binaries
          loop:
            - "/usr/local/bin/spark-http-proxy"
            - "/usr/local/bin/test-http-proxy"

        - name: Ensure all new binaries exist
          fail:
            msg: "Required binary {{ item.item }} does not exist"
          loop: "{{ new_binaries.results }}"
          when: not item.stat.exists

        - name: Check if old dinghy-proxy binaries exist
          stat:
            path: "{{ item }}"
          register: old_binaries
          loop:
            - "/usr/local/bin/run-dinghy-proxy"
            - "/usr/local/bin/test-dinghy-proxy"

        - name: Remove old dinghy-proxy binaries if they exist and are not symlinks
          file:
            path: "{{ item.item }}"
            state: absent
          loop: "{{ old_binaries.results }}"
          when: item.stat.exists and not item.stat.islnk
          become: yes
          become_method: sudo

        - name: Migrate old dinghy certificates to new location
          block:
            - name: Check if old dinghy certs directory exists
              stat:
                path: "{{ ansible_env.HOME }}/.dinghy/certs"
              register: old_certs_dir

            - name: Create new certs directory
              file:
                path: "{{ ansible_env.HOME }}/.local/spark/http-proxy/certs"
                state: directory
                mode: "0755"

            - name: Copy certificates from old to new location
              copy:
                src: "{{ ansible_env.HOME }}/.dinghy/certs/"
                dest: "{{ ansible_env.HOME }}/.local/spark/http-proxy/certs/"
                remote_src: true
              when: old_certs_dir.stat.exists

        - name: Display transition completion message
          debug:
            msg: |
              ✅ Dinghy-proxy to http-proxy transition completed:
              - Http-proxy repository cloned to {{ dev_env_dir }}/http-proxy
              - Main script symlinked as spark-http-proxy
              - Backward compatibility symlinks created:
                * run-http-proxy → spark-http-proxy
                * run-dinghy-proxy → spark-http-proxy
              - Certificates migrated to new location

              You can now use any of these commands:
              - spark-http-proxy (new primary command)
              - run-http-proxy (compatibility)
              - run-dinghy-proxy (compatibility)

    - name: Configure keyboard settings
      tags: keyboard
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - {
            src: "config/keyboard/en-intl-alt-gr-dead-keys.keylayout",
            dest: "~/Library/Keyboard Layouts",
          }
        - {
            src: "config/keyboard/DefaultKeyBinding.dict",
            dest: "~/Library/KeyBindings",
          }

    # Install to /usr/local/bin as the other binaries.
    - name: Install sjust executable
      tags: sjust
      block:
        - name: Copy sjust executable
          copy:
            src: "{{ dev_env_dir }}/sjust/sjust.sh"
            dest: "/usr/local/bin/sjust"
            mode: "0755"
          become: yes
          become_method: sudo

        - name: Get Homebrew prefix
          command: brew --prefix
          register: brew_prefix
          changed_when: false

        - name: Ensure zsh site-functions directory exists with correct ownership
          file:
            path: "{{ brew_prefix.stdout }}/share/zsh/site-functions"
            state: directory
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_gid }}"
            mode: "0755"
          become: yes
          become_method: sudo

        - name: Ensure _sjust completion file has correct ownership (if present)
          file:
            path: "{{ brew_prefix.stdout }}/share/zsh/site-functions/_sjust"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_gid }}"
            mode: "0644"
          become: yes
          become_method: sudo
          ignore_errors: yes

        - name: Generate sjust zsh completion
          shell: |
            just --completions zsh | sed -E 's/([\(_" ])just/\1sjust/g' > "{{ brew_prefix.stdout }}/share/zsh/site-functions/_sjust"
          register: completion_result
          changed_when: completion_result.rc == 0
          become: no

        - name: Ensure sjust zsh completion has correct ownership and permissions
          file:
            path: "{{ brew_prefix.stdout }}/share/zsh/site-functions/_sjust"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_gid }}"
            mode: "0644"
          become: yes
          become_method: sudo

    # Apply macOS system defaults configuration using sjust
    - name: Apply macOS system defaults for developers
      shell: /usr/local/bin/sjust macos-defaults
      become: no
      tags: macos-defaults
      when: "'/usr/local/bin/sjust' is exists"

    - name: Remove unwanted cask packages
      community.general.homebrew_cask:
        name: "{{ item }}"
        state: absent
      loop: "{{ all_removed_cask_packages }}"
      when: all_removed_cask_packages | length > 0
      become: false

    - name: Install Sparkdock Menu Bar App
      tags: menubar
      block:
        - name: Build menu bar app
          shell: |
            cd {{ dev_env_dir }}/src/menubar-app
            swift build -c release
          register: build_result
          changed_when: build_result.rc == 0
          failed_when: false # Don't fail immediately, handle errors in rescue block

        - name: Check if build was successful
          fail:
            msg: "Swift build failed. See rescue block for instructions."
          when: build_result.rc != 0

        - name: Install menu bar app binary
          copy:
            src: "{{ dev_env_dir }}/src/menubar-app/.build/release/sparkdock-manager"
            dest: "/usr/local/bin/sparkdock-manager"
            mode: "0755"
            remote_src: true
          become: yes
          become_method: sudo

        - name: Verify menu bar app works
          command: /usr/local/bin/sparkdock-manager --status
          register: sparkdock_status
          changed_when: false

        - name: Display menu bar app status
          debug:
            msg: "{{ sparkdock_status.stdout_lines }}"

        - name: LaunchAgent installation (local environment only)
          block:
            - name: Remove old update service (replace with menubar app)
              file:
                path: "{{ item }}"
                state: absent
              loop:
                - "~/Library/LaunchAgents/com.sparkfabrik.sparkdock.plist"
              ignore_errors: yes

            - name: Ensure user LaunchAgents directory exists
              file:
                path: "{{ ansible_env.HOME }}/Library/LaunchAgents"
                state: directory
                mode: "0755"
              become: no

            - name: Install menubar app launch agent
              copy:
                src: "{{ dev_env_dir }}/src/menubar-app/com.sparkfabrik.sparkdock.menubar.plist"
                dest: "{{ ansible_env.HOME }}/Library/LaunchAgents/com.sparkfabrik.sparkdock.menubar.plist"
                mode: "0644"
              become: no

            - name: Load menubar app launch agent
              shell: |
                pkill -f "sparkdock-manager" 2>/dev/null || true
                launchctl bootout gui/$(id -u) "{{ ansible_env.HOME }}/Library/LaunchAgents/com.sparkfabrik.sparkdock.menubar.plist" 2>/dev/null || true
                launchctl bootstrap gui/$(id -u) "{{ ansible_env.HOME }}/Library/LaunchAgents/com.sparkfabrik.sparkdock.menubar.plist"
                launchctl enable gui/$(id -u)/com.sparkfabrik.sparkdock.menubar
                launchctl kickstart gui/$(id -u)/com.sparkfabrik.sparkdock.menubar
              become: no
              ignore_errors: yes
          when: not is_non_interactive

      rescue:
        - name: Display compilation failure message
          debug:
            msg:
              - "❌ Sparkdock Menu Bar App compilation failed!"
              - ""
              - "This is often caused by issues with Xcode command line tools."
              - "Common symptoms include Swift compiler errors or missing headers."
              - ""
              - "🔧 To fix this issue, run the following command:"
              - "   sjust sparkdock-menubar-reinstall"
              - ""
              - "This command will:"
              - "  1. Remove existing Xcode command line tools"
              - "  2. Reinstall them properly"
              - "  3. Retry the menubar app installation"

        - name: Show build error output
          debug:
            msg:
              - "Build command output:"
              - "{{ build_result.stdout_lines | default(['No stdout']) }}"
              - "Build command stderr:"
              - "{{ build_result.stderr_lines | default(['No stderr']) }}"
          when: build_result is defined

        - name: Fail with helpful message
          fail:
            msg: |
              Menubar app compilation failed. Run 'sjust sparkdock-menubar-reinstall' to fix Xcode command line tools and retry installation.

  post_tasks:
    - name: Print installation complete message
      debug:
        msg: "macOS system configuration completed successfully!"
