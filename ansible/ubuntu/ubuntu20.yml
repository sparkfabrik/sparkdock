---
- hosts: 127.0.0.1
  connection: local
  become: true
  become_user: root

  vars:
    docker_compose_version: 1.29.2
    dnsdock_image: aacebedo/dnsdock:v1.16.4-amd64
    dev_env_dir: /tmp/dev-env

  tasks:
    - name: Install the base required dependencies and suggested packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - docker.io
          - git
          - make
          - curl
        state: latest
        update_cache: yes

    - name: Allow current user to execute docker commands
      user: name={{ ansible_ssh_user }} groups=docker append=yes

    - name: Check if docker-compose binary exists
      stat: path=/usr/local/bin/docker-compose
      register: docker_compose_bin

    - name: Install docker-compose
      shell: "curl -L https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose"
      when: not docker_compose_bin.stat.exists

    - name: Create directory for systemd-resolved custom conf
      file:
        path: /etc/systemd/resolved.conf.d
        state: directory

    - name: Configure systemd-resolved to play well with dnsdock
      copy:
        dest: "/etc/systemd/resolved.conf.d/dnsdock.conf"
        content: |
          [Resolve]
          DNS=172.17.0.1
          Domains=~loc

    - name: Update current user groups
      shell: newgrp docker
      become: no

    - name: Start dnsdock resolver
      shell: "{{ item  }}"
      with_items:
        - "sg docker -c 'docker rm -vf dnsdock || true'"
        - "sg docker -c 'docker run --restart=always -d -v /var/run/docker.sock:/var/run/docker.sock --name dnsdock -p 172.17.0.1:53:53/udp {{ dnsdock_image }}'"
      become: no

    - name: Restart systemd-resolved
      service: name=systemd-resolved state=restarted

    - name: Copy dnsdock start script
      copy:
        src: "{{ dev_env_dir }}/config/ubuntu/bin/run-dnsdock"
        dest: /usr/local/bin/run-dnsdock
        owner: root
        group: root
        mode: '0755'
        force: yes

    - name: Copy dnsdock test script
      copy:
        src: "{{ dev_env_dir }}/config/bin/test-dnsdock"
        dest: /usr/local/bin/test-dnsdock
        owner: root
        group: root
        mode: '0755'
        force: yes

    - name: Copy dinghy-http-proxy start script
      copy:
        src: "{{ dev_env_dir }}/config/ubuntu/bin/run-dinghy-proxy"
        dest: /usr/local/bin/run-dinghy-proxy
        owner: root
        group: root
        mode: '0755'
        force: yes

    - name: Copy dinghy-http-proxy test script
      copy:
        src: "{{ dev_env_dir }}/config/bin/test-dinghy-proxy"
        dest: /usr/local/bin/test-dinghy-proxy
        owner: root
        group: root
        mode: '0755'
        force: yes
