#!/usr/bin/env -S zsh

BASE_DIR="$(dirname "$(readlink -f "$0")")"
source ${BASE_DIR}/common/utils.sh

print() {
    echo -e "\e[1m\e[93m[ \e[92mâ€¢\e[93m ] \e[4m$1\e[0m"
}

checkMacosVersion() {
    if ! [[ $( sw_vers -productVersion ) =~ ^(15.[0-9]+|14.[0-9]+|13.[0-9]+|12.[0-9]+|11.[0-9]+) ]] ; then
        print  "${RED}Sorry, this script is supposed to be executed on macOS Big Sur (11.x), Monterey (12.x), Ventura (13.x), Sonoma (14.x) and Sequoia (15.x). Please use a supported version.${NC}"
        return 1
    fi
    return 0
}

# Architecture - fix the incorrect syntax
ARCH=$(uname -m)

# Check for non-interactive mode
NON_INTERACTIVE=false
if [[ "$1" == "--non-interactive" ]]; then
    NON_INTERACTIVE=true
    print "Running in non-interactive mode for CI environment"
fi

# Cleaning the TTY.
clear

print "Sparkdock installer: This is a MacOS provisioner, to bootstrap the system."
print "Checking for macOS supported version..."
checkMacosVersion

## Install or Update Homebrew ##
print "Installing or Updating Homebrew..."
if ! command -v brew &> /dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [ "${ARCH}" == "arm64" ]; then
      echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/${USER}/.zprofile
      eval "$(/opt/homebrew/bin/brew shellenv)"
    else
      echo 'eval "$(/usr/local/bin/brew shellenv)"' >> /Users/${USER}/.zprofile
      eval "$(/usr/local/bin/brew shellenv)"
    fi
else
    brew update
    brew cleanup
    brew uninstall --force brew-cask || true
    brew update
fi

## Install or Update Ansible ##
print 'Installing or Updating Ansible...'
if ! command -v ansible-playbook &> /dev/null; then
  brew install ansible
else
  brew upgrade ansible
fi

# Install rosetta2 if needed on Apple Silicon
print 'Installing Rosetta2 if needed...'
if [[ $ARCH == "arm64" ]]; then
  softwareupdate --install-rosetta --agree-to-license || true
fi

# Install xcode command line tools if needed
if ! xcode-select -p &> /dev/null; then
  print 'Installing Xcode Command Line Tools...'
  if [[ "$NON_INTERACTIVE" == "true" ]]; then
    # For CI, we assume CLT is already installed, so just skip
    print "Skipping Xcode Command Line Tools in non-interactive mode"
  else
    xcode-select --install
  fi
fi

# Accept the license (only if not in CI)
if [[ "$NON_INTERACTIVE" != "true" ]]; then
  sudo xcodebuild -license accept || true
fi

# Install standard utilities.
print 'Installing base packages with brew...'
brew install git curl python3

## Check out a copy of this repo (first time only)
print 'Checking out Sparkdock repo...'
sudo rm -rf /opt/sparkdock && \
sudo mkdir -p /opt/sparkdock && \
sudo chown $(id -u):$(id -g) /opt/sparkdock
git clone https://github.com/sparkfabrik/sparkdock.git /opt/sparkdock || cp -R $(dirname $BASE_DIR) /opt/sparkdock

## Install the launchd service
print "Installing update checker service..."
install_update_service

## Run Ansible Playbook
print "Run ansible playbook..."
cd /opt/sparkdock
if [[ "$NON_INTERACTIVE" == "true" ]]; then
  ansible-playbook ./ansible/macos.yml -i ./ansible/inventory.ini -e "ansible_become_password=" --become
else
  ansible-playbook ./ansible/macos.yml -i ./ansible/inventory.ini --ask-become-pass
fi

# Run dinghy-http-proxy.
print "Run docker http proxy..."
if [[ "$NON_INTERACTIVE" != "true" ]]; then
  open --background -a Docker
  sleep 10
  /usr/local/bin/run-dinghy-proxy || true
fi

## Copy sparkdock.macos to /usr/local/bin
sudo ln -sf $PWD/bin/sparkdock.macos /usr/local/bin/sparkdock
sudo chmod +x /usr/local/bin/sparkdock

## Print some useful messages.
print "Now remember to add to your .bashrc or .zshrc the following commands:\n"

brew info google-cloud-sdk

echo ""
echo ""
print "!! IMPORTANT: To finish the installation you must configure this: https://docs.brew.sh/Shell-Completion"
echo ""
print "Thanks for installing sparkdock, enjoy a dockerized world!"
