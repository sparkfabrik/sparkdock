#!/usr/bin/env -S zsh

BASE_DIR="$(dirname "$(readlink -f "$0")")"
source ${BASE_DIR}/common/utils.sh

print() {
    echo -e "\e[1m\e[93m[ \e[92m•\e[93m ] \e[4m$1\e[0m"
}

checkMacosVersion() {
    if ! [[ $( sw_vers -productVersion ) =~ ^(15.[0-9]+|14.[0-9]+|13.[0-9]+|12.[0-9]+|11.[0-9]+) ]] ; then
        print  "${RED}Sorry, this script is supposed to be executed on macOS Big Sur (11.x), Monterey (12.x), Ventura (13.x), Sonoma (14.x) and Sequoia (15.x). Please use a supported version.${NC}"
        return 1
    fi
    return 0
}

# Check for command line flags
NON_INTERACTIVE=false
PRESERVE_EXISTING=false

# Parse command line arguments
for arg in "$@"; do
    case $arg in
        --non-interactive)
            NON_INTERACTIVE=true
            print "Running in non-interactive mode for CI environment"
            ;;
        --preserve-existing)
            PRESERVE_EXISTING=true
            print "Preserving existing /opt/sparkdock installation for idempotency testing"
            ;;
    esac
done

# Architecture - using proper command
ARCH=$(uname -m)

# Cleaning the TTY.
clear
sparkdockfetch

print "Sparkdock installer: This is a MacOS provisioner, to bootstrap the system."
print "Checking for macOS supported version..."
checkMacosVersion

## Install or Update Homebrew ##
print "Installing or Updating Homebrew..."
if ! command -v brew &> /dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    if [ "${ARCH}" == "arm64" ]; then
      echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/${USER}/.zprofile
      eval "$(/opt/homebrew/bin/brew shellenv)"
    else
      echo 'eval "$(/usr/local/bin/brew shellenv)"' >> /Users/${USER}/.zprofile
      eval "$(/usr/local/bin/brew shellenv)"
    fi
else
    brew update
    brew cleanup
    brew uninstall --force brew-cask || true
    brew update
fi

## Install or Update Ansible ##
print 'Installing or Updating Ansible...'
if ! command -v ansible-playbook &> /dev/null; then
  brew install ansible
else
  brew upgrade ansible
fi

# Install rosetta2 if needed on Apple Silicon
print 'Installing Rosetta2 if needed...'
if [[ $ARCH == "arm64" ]]; then
  softwareupdate --install-rosetta --agree-to-license || true
fi

# Install xcode command line tools.
if ! xcode-select -p &> /dev/null; then
  print 'Installing Xcode Command Line Tools...'
  if [[ "$NON_INTERACTIVE" == "true" ]]; then
    # For CI, we assume CLT is already installed, so just skip
    print "Skipping Xcode Command Line Tools in non-interactive mode"
  else
    xcode-select --install
  fi
fi

# Accept the license (only if not in CI)
if [[ "$NON_INTERACTIVE" != "true" ]]; then
  sudo xcodebuild -license accept || true
fi

# Install standard utilities.
print 'Installing base packages with brew...'
brew install git curl python3

## Check out a copy of this repo (first time only)
print 'Checking out Sparkdock repo...'

# Only remove existing installation if not preserving it
if [[ "$PRESERVE_EXISTING" != "true" ]]; then
    sudo rm -rf /opt/sparkdock && \
    sudo mkdir -p /opt/sparkdock && \
    sudo chown $(id -u):$(id -g) /opt/sparkdock
    
    # In CI, we have the repo already checked out, so copy it instead of cloning
    if [[ "$NON_INTERACTIVE" == "true" ]]; then
      # we are in a CI environment, so we assume the repo is already checked out and we are at the root of the repo.
      rsync -azh --exclude='.git' . /opt/sparkdock
    else
      git clone https://github.com/sparkfabrik/sparkdock.git /opt/sparkdock
    fi
else
    print "Preserving existing /opt/sparkdock installation"
    # Just ensure the directory exists and is accessible
    if [[ ! -d /opt/sparkdock ]]; then
        print "ERROR: /opt/sparkdock does not exist but --preserve-existing was specified"
        exit 1
    fi
fi

# Note: Update checking is now handled by the Sparkdock Manager menu bar app
# which is installed via Ansible with the 'menubar' tag

## Run Ansible Playbook
print "Run ansible playbook..."
cd /opt/sparkdock

# Create inventory file if it doesn't exist
if [[ ! -f ./ansible/inventory.ini ]]; then
  print "Creating inventory file..."
  mkdir -p ./ansible
  cat > ./ansible/inventory.ini << 'EOF'
[localhost]
127.0.0.1 ansible_connection=local
EOF
fi

# Modify sparkdock.macos to use non-interactive mode if needed
# it should exit if ansible fails.
if [[ "$NON_INTERACTIVE" == "true" ]]; then
  # Make the sed replacement idempotent - only replace if the original pattern exists
  if grep -q -- "--ask-become-pass" /opt/sparkdock/bin/sparkdock.macos; then
    sed -i '' 's/--ask-become-pass/-e "ansible_become_password=" --become/g' /opt/sparkdock/bin/sparkdock.macos
  fi
  # Try to remove spurious files, they are part of the tart VM.
  # Yarn: /opt/homebrew/lib/node_modules/yarn/bin/yarn.js
  if [[ -e /opt/homebrew/lib/node_modules/yarn/bin/yarn.js ]]; then
    sudo rm -f /opt/homebrew/lib/node_modules/yarn/bin/yarn.js
  fi
  ansible-playbook ./ansible/macos.yml -i ./ansible/inventory.ini -e "ansible_become_password=" --become -v
else
  ansible-playbook ./ansible/macos.yml -i ./ansible/inventory.ini --ask-become-pass -v
fi
if [[ $? -ne 0 ]]; then
  print "Ansible playbook failed. Exiting..."
  exit 1
fi

# Run http-proxy.
if [[ "$NON_INTERACTIVE" != "true" ]]; then
  open --background -a Docker
  print "Run docker http proxy..."
  sleep 60
  if [[ -x /usr/local/bin/run-http-proxy ]]; then
    /usr/local/bin/run-http-proxy || true
  else
    print "Warning: run-http-proxy not found or not executable"
  fi
fi

## Copy sparkdock.macos to /usr/local/bin
if [[ -f $PWD/bin/sparkdock.macos ]]; then
  sudo ln -sf $PWD/bin/sparkdock.macos /usr/local/bin/sparkdock
  sudo chmod +x /usr/local/bin/sparkdock
else
  print "Warning: sparkdock.macos not found. Skipping symlink creation."
fi

# Just run sjust to the test it works.
print "Running sjust to test it works..."
sjust

## Print some useful messages.
if [[ "$NON_INTERACTIVE" != "true" ]]; then
  print "Now remember to add to your .bashrc or .zshrc the following commands:\n"
  brew info google-cloud-sdk
  echo ""
  echo ""
  print "!! IMPORTANT: To finish the installation you must configure this: https://docs.brew.sh/Shell-Completion"
  echo ""
fi

print "Thanks for installing sparkdock, enjoy a dockerized world!"
