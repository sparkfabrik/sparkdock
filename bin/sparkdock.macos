#!/usr/bin/env -S zsh

set -e

# Default branch name (change to "main" when migrating)
DEFAULT_BRANCH=${DEFAULT_BRANCH:-master}

BASE_DIR="$(dirname "$(readlink -f "$0")")"
source ${BASE_DIR}/common/utils.sh

# Determine if we're running from installed location or local repo
get_root_dir() {
    if [ -d "/opt/sparkdock" ]; then
        # Check if we're running from installed location
        if [[ "$0" == "/opt/sparkdock/"* ]]; then
            echo "/opt/sparkdock"
            return
        fi
    fi
    # We're running from local repo
    echo "$(cd "${BASE_DIR}/.." && pwd)"
}

SPARKDOCK_ROOT="$(get_root_dir)"

cleanup_lock() {
    LOCK_FILE="/tmp/sparkdock.lock"
    if [ -f "$LOCK_FILE" ] && [ "$(cat $LOCK_FILE)" = "$$" ]; then
        rm -f "$LOCK_FILE"
    fi
}

# Set up trap at the start to catch all exits
trap cleanup_lock EXIT

check_for_updates() {
    cd "$SPARKDOCK_ROOT"
    # Only check for updates if we're running from installed location
    if [ "$SPARKDOCK_ROOT" != "/opt/sparkdock" ]; then
        return 1
    fi

    git fetch origin ${DEFAULT_BRANCH} -q
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/${DEFAULT_BRANCH})

    if [ "$LOCAL" != "$REMOTE" ]; then
        echo "Updates available:"
        git --no-pager log --oneline HEAD..origin/${DEFAULT_BRANCH}
        return 0
    fi
    return 1
}

# Add update lock to prevent parallel updates
 check_update_lock() {
    LOCK_FILE="/tmp/sparkdock.lock"
    if [ -f "$LOCK_FILE" ]; then
        pid=$(cat "$LOCK_FILE")
        lock_time=$(stat -f "%m" "$LOCK_FILE")
        current_time=$(date +%s)
        if [ $((current_time - lock_time)) -gt 3600 ]; then
            rm -f "$LOCK_FILE"
        elif ps -p "$pid" > /dev/null; then
            print "Another update is in progress (PID: $pid)"
            exit 1
        fi
    fi
    echo $$ > "$LOCK_FILE"
 }

notify() {
    osascript -e "display notification \"$1\" with title \"Sparkdock\""
}

# Install/update the launchd service first
install_update_service

# Version command
if [ "$1" = "version" ] ; then
    get_version_info
    exit 0
fi

# Update check mode
if [ "$1" = "check-updates" ] ; then
    if check_for_updates; then
        notify "Updates are available. Run 'sparkdock' to update your system."
        exit 0  # Updates available
    fi
    exit 1  # No updates available
fi

# Updating myself.
if [ "$1" != "skip-update" ] ; then
    # Only perform updates if we're running from installed location
    if [ "$SPARKDOCK_ROOT" = "/opt/sparkdock" ]; then
        check_update_lock

        cd "$SPARKDOCK_ROOT"

        # Backup current version for rollback
        CURRENT_VERSION=$(git rev-parse HEAD)

        # Store last update time
        date "+%Y-%m-%d %H:%M:%S" > "$SPARKDOCK_ROOT/.last_update"

        # A flag to track if any update action is performed.
        update_actions_performed=false

        # Check current branch
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

        # Check for local changes (both tracked and untracked)
        if ! git diff --quiet HEAD || [ -n "$(git ls-files --others --exclude-standard)" ]; then
            print_warning "You have local changes that will be stashed."
            echo ""
            if ! git stash push -u -m "sparkdock-update auto-stash"; then
                print_error "Failed to stash changes. Aborting update."
                exit 1
            fi
            print_success "To recover your work later, run 'git stash pop'."
            update_actions_performed=true
        fi

        if [ "${CURRENT_BRANCH}" != "${DEFAULT_BRANCH}" ]; then
            print_warning "You are on branch '${CURRENT_BRANCH}', not '${DEFAULT_BRANCH}'. Switching to '${DEFAULT_BRANCH}'."
            if ! git checkout "${DEFAULT_BRANCH}"; then
                print_error "Failed to switch to ${DEFAULT_BRANCH}. Aborting update."
                exit 1
            fi
            update_actions_performed=true
        fi

        # Now on the default branch, pull the latest changes
        git fetch origin ${DEFAULT_BRANCH}
        if ! git reset --hard origin/${DEFAULT_BRANCH}; then
            print_error "Cannot reset to origin/${DEFAULT_BRANCH}. Aborting update."
            exit 1
        fi

        if [ "$update_actions_performed" = true ]; then
            echo ""
            print_success "Update completed successfully. You are now on branch '${DEFAULT_BRANCH}'."
            echo ""
            echo -n "Starting in 5 seconds"
            for i in {1..5}; do
                echo -n "."
                sleep 1
            done
        fi

        $0 skip-update
        exit $?
    fi
fi

# Cleaning the TTY.
if [ "$1" != "skip-update" ]; then
    clear
fi
print_banner

print_section "System Check"
print_info "Checking for macOS supported version..."
checkMacosVersion

print_section "System Update"
print_info "Sparkdock provisioner: Updating your system in progress..."
print_info "Running ansible playbook..."
print_warning "You'll be asked to insert your password to become root"
ansible-playbook "$SPARKDOCK_ROOT/ansible/macos.yml" -i "$SPARKDOCK_ROOT/ansible/inventory.ini" --ask-become-pass -v

print_success "Installation completed successfully"

exit 0
